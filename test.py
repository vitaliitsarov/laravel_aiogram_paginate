from aiogram import types
from loader import dp
import requests
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os
from urllib.parse import urlparse, parse_qs

@dp.message_handler(lambda message: message.text == "‚Äçüë®‚Äçüëß‚Äçüëß –ö–ª–∏–µ–Ω—Ç—ã")
async def clients(message: types.Message):
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f'http://localhost/allUsers'
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {'Accept': 'application/json'}
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if 'data' in data:
            script_dir = os.path.dirname(__file__)
            rel_path = "../../assets/images/bro.png"
            photo = open(os.path.join(script_dir, rel_path), "rb")
            keyboards = await pagination(data)
            await dp.bot.send_photo(message.from_user.id, photo=photo, reply_markup=keyboards)
        else:
            await dp.bot.send_message(message.from_user.id, text=f'–û—à–∏–±–∫–∞')
            
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
@dp.callback_query_handler(lambda c: c.data.startswith('page'))
async def proxy_mobile(query: types.CallbackQuery = None):
    page = query.data.split('#')[1]
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f'http://localhost/allUsers?page={page}'
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {'Accept': 'application/json'}
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if 'data' in data:
            keyboards = await pagination(data)
            await query.message.edit_reply_markup(reply_markup=keyboards)
        else:
            await dp.bot.send_message(query.from_user.id, text=f'–û—à–∏–±–∫–∞')

# –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è paginate
async def pagination(data):
    buttons = []
    for x in data['data']:
        user_button = [
            InlineKeyboardButton(f'{x["login"]}', callback_data=f'userInfo-{x["id"]}')
        ]
        buttons.append(user_button)

    bottom_buttons = []
    if data["current_page"] != 1:
        parsed_url = urlparse(data["prev_page_url"])
        prevPage = parse_qs(parsed_url.query)
        bottom_buttons.append(InlineKeyboardButton(f'‚¨ÖÔ∏è', callback_data=f'page#{prevPage["page"][0]}'))
    else:
        bottom_buttons.append(InlineKeyboardButton(f'‚õîÔ∏è', callback_data=f'stop'))

    bottom_buttons.append(
        InlineKeyboardButton(f'{data["current_page"]}/{data["last_page"]}', callback_data=f'back_proxy_type'))

    if data["current_page"] == data["last_page"]:
        bottom_buttons.append(InlineKeyboardButton(f'‚õîÔ∏è', callback_data=f'stop'))
    else:
        parsed_url = urlparse(data["next_page_url"])
        nextPage = parse_qs(parsed_url.query)
        bottom_buttons.append(InlineKeyboardButton(f'‚û°Ô∏è', callback_data=f'page#{nextPage["page"][0]}'))

    buttons.append(bottom_buttons)

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)

    return keyboard
